--GSHEET OUTPUT >> https://docs.google.com/spreadsheets/d/1mz2xPlUBEIr_zot11qcL9rp9pFgws0VOnQlDn3XJuWo/edit?usp=sharing

--1. Monthly Active Buyers & Orders? Trending from 1/2019-4/2022?
SELECT
  FORMAT_DATE('%Y-%m', i.delivered_at)  as order_month,
  COUNT(DISTINCT o.order_id) as order_count,
  COUNT(DISTINCT o.user_id) as buyer_count
FROM bigquery-public-data.thelook_ecommerce.orders as o
INNER JOIN bigquery-public-data.thelook_ecommerce.order_items as i
ON o.order_id =i.order_id
WHERE o.status = 'Complete' AND i.delivered_at BETWEEN '2019-01-01 00:00:00' AND '2022-05-01 00:00:00'
GROUP BY order_month
ORDER BY order_month

--2. AOV & Monthly Active Buyers? Trending?
SELECT
  order_month,
  COUNT(DISTINCT user_id) as MAU,
  ROUND(AVG (user_aov),2) as monthly_aov
FROM (
  SELECT
    FORMAT_DATE('%Y-%m', created_at) as order_month,
    user_id,
    SUM(sale_price)/COUNT (DISTINCT order_id) as user_aov,
  FROM bigquery-public-data.thelook_ecommerce.order_items
  WHERE created_at BETWEEN '2019-01-01 00:00:00' AND '2022-05-01 00:00:00'
  GROUP BY order_month, user_id
) AS monthly_aov
GROUP BY order_month
ORDER BY order_month

--3. Buyers by Age: Youngest? Oldest?

WITH age_filter as (
  SELECT
    id, first_name, last_name, gender, age,
    DENSE_RANK() OVER (PARTITION BY gender ORDER BY age ASC) as young_to_old,
    DENSE_RANK() OVER (PARTITION BY gender ORDER BY age DESC) as old_to_young,
  FROM bigquery-public-data.thelook_ecommerce.users
  WHERE created_at BETWEEN '2019-01-01 00:00:00' AND '2022-05-01 00:00:00'
  ORDER BY gender,young_to_old
)
, age_group as (
  SELECT 
    id, first_name, last_name, gender, age,
    (CASE WHEN young_to_old =1 THEN "youngest" ELSE "oldest" END) as tag
  FROM age_filter
  WHERE young_to_old = 1 OR old_to_young =1
)
SELECT 
  gender, age,
  COUNT(DISTINCT id) as user_count
FROM age_group
GROUP BY gender, age

--4. Top SKUs
WITH top_monthly_items AS
  (SELECT 
  *,
  DENSE_RANK() OVER (PARTITION BY order_month ORDER BY profit DESC) as profit_rank
  FROM (
    SELECT
      CAST(FORMAT_DATE('%Y-%m', i.delivered_at) AS STRING) as order_month,
      i.product_id,
      p.name,
      SUM(p.retail_price) as rev,
      SUM(p.cost) as cost,
      SUM(p.retail_price) - SUM(p.cost) as profit
    FROM bigquery-public-data.thelook_ecommerce.order_items as i
    INNER JOIN bigquery-public-data.thelook_ecommerce.products as p
    ON i.product_id = p.id
    Where i.status='Complete'
    GROUP BY order_month,o.product_id,p.name
    )
  )
SELECT *
FROM top_monthly_items
WHERE profit_rank <=5
ORDER BY order_month ASC, profit DESC

--5. MTD Sale
  SELECT
    CAST(FORMAT_DATE('%Y-%m-%d', i.delivered_at) AS STRING) as order_date,
    p.category as product_categories,
    round(sum(i.sale_price),2) as revenue,
  FROM bigquery-public-data.thelook_ecommerce.order_items AS i
  INNER JOIN bigquery-public-data.thelook_ecommerce.products AS p 
  ON i.product_id = p.id
  WHERE i.status='Complete' and i.delivered_at BETWEEN '2022-01-15 00:00:00' AND '2022-04-16 00:00:00'
  GROUP BY order_date,category
  ORDER BY order_date,category

--6. Build Dashboard 
WITH category_CTE as (SELECT
  FORMAT_DATE('%Y-%m', o.created_at)  as month,
  FORMAT_DATE('%Y', t1.created_at)  as year,
  p.category as product_cat,
  ROUND(SUM (i.sale_price)) as tpv,
  COUNT(i.order_id) as tpo,
  ROUND(SUM(p.cost),2) as total_cost,
FROM bigquery-public-data.thelook_ecommerce.orders as o
JOIN bigquery-public-data.thelook_ecommerce.order_items as i ON o.order_id =i.order_id
JOIN bigquery-public-data.thelook_ecommerce. products as p ON p.id= i.product_id
GROUP BY month,year,category
ORDER BY category,year,month)

SELECT 
  month,year,product_cat,tpv,tpo,
  round(cast((tpv - lag(tpv) OVER(PARTITION BY product_cat ORDER BY year, month))
      /lag(tpv) OVER(PARTITION BY product_cat ORDER BY year, month) as Decimal)*100.00,2) || '%'
       as Revenue_growth,
  round(cast((tpo - lag(tpo) OVER(PARTITION BY product_cat ORDER BY year, month))
      /lag(tpo) OVER(PARTITION BY product_cat ORDER BY year, month) as Decimal)*100.00,2) || '%'
       as Order_growth,
  total_cost,
  round(tpv - total_cost,2) as total_profit,
  round((tpv - total_cost)/total_cost,2) as profit_to_cost_ratio
FROM category_CTE
ORDER BY product_cat,year,month

--7. Build Cohort Chart
WITH a as(
  SELECT
    user_id, amount, 
    FORMAT_DATE('%Y-%m', first_purchase_date) as cohort_month,
    created_at,
    (Extract(year from created_at) - extract(year from first_purchase_date))*12 
    + Extract(MONTH from created_at) - extract(MONTH from first_purchase_date) +1
      as index
  FROM (
    SELECT 
      user_id, 
      round(sale_price,2) as amount,
      MIN(created_at) OVER (PARTITION BY user_id) as first_purchase_date,
      created_at
    FROM bigquery-public-data.thelook_ecommerce.order_items 
      ) as b)

, cohort_data as(
  SELECT
    cohort_month, 
    index,
    COUNT(DISTINCT user_id) as user_count,
    round(SUM(amount),2) as revenue
  FROM a
  GROUP BY cohort_month, index
  ORDER BY INDEX
)
--CUSTOMER COHORT-- 
, customer_cohort as(
  SELECT 
    cohort_month,
    SUM(CASE WHEN index=1 THEN user_count ELSE 0 END) AS m1,
    SUM(CASE WHEN index=2 THEN user_count ELSE 0 END) AS m2,
    SUM(CASE WHEN index=3 THEN user_count ELSE 0 END) AS m3,
    SUM(CASE WHEN index=4 THEN user_count ELSE 0 END) AS m4
  FROM cohort_data
  GROUP BY cohort_month
  ORDER BY cohort_month
)
--RETENTION COHORT--
, retention_cohort as (
  SELECT 
    cohort_month,
    ROUND(100.00* m1/m1,2) || '%' AS m1,
    ROUND(100.00* m2/m1,2) || '%' AS m2,
    ROUND(100.00* m3/m1,2) || '%' AS m3,
    ROUND(100.00* m4/m1,2) || '%' AS m4
  FROM customer_cohort
)
--CHURN COHORT--
SELECT
  cohort_month,
  (100.00 - ROUND(100.00* m1/m1,2)) || '%' AS m1,
  (100.00 - ROUND(100.00* m2/m1,2)) || '%' AS m2,
  (100.00 - ROUND(100.00* m3/m1,2)) || '%' AS m3,
  (100.00 - ROUND(100.00* m4/m1,2))|| '%' AS m4
FROM customer_cohort
