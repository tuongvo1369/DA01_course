/*1--Assume you're given a table containing job postings from various companies on the LinkedIn platform. Write a query to retrieve the count of companies that have posted duplicate job listings.
Definition: Duplicate job listings are defined as two job listings within the same company that share identical titles and descriptions ->> 3 company dup*/
WITH job_post AS (
  SELECT
    company_id,
    title,
    description,
    COUNT(job_id) AS job_count
  FROM job_listings
  GROUP BY company_id,title,description
  HAVING COUNT(job_id)>1)
SELECT
COUNT(*) AS dup_case
FROM job_post 
/*2--Assume you're given a table containing data on Amazon customers and their spending on products in different category, write a query to identify the top two highest-grossing products within each category in the year 2022. The output should include the category, product, and total spend*/
WITH product_spend_2022 AS (
  SELECT
    category,
    product,
    SUM(spend) AS total_spend,
    RANK() OVER (
      PARTITION BY category 
      ORDER BY SUM(spend) DESC) AS ranking 
  FROM product_spend
  WHERE EXTRACT(year FROM transaction_date)= 2022
  GROUP BY category, product)

SELECT
  category,
  product,
  total_spend
FROM product_spend_2022
WHERE ranking <=2
ORDER BY category, ranking

/*3--UnitedHealth Group (UHG) has a program called Advocate4Me, which allows policy holders (or, members) to call an advocate and receive support for their health care needs â€“ whether that's claims and benefits support, drug coverage, pre- and post-authorisation, medical records, emergency assistance, or member portal services.
Write a query to find how many UHG policy holders made three, or more calls, assuming each call is identified by the case_id column. ->> 38 holders*/

SELECT
  policy_holder_id,
  COUNT (case_id) AS call_count
FROM callers
GROUP BY policy_holder_id)

SELECT
count(DISTINCT policy_holder_id )
FROM case_review
WHERE call_count>=3

/*4--Assume you're given two tables containing data about Facebook Pages and their respective likes (as in "Like a Facebook Page").
Write a query to return the IDs of the Facebook pages that have zero likes. The output should be sorted in ascending order based on the page IDs.--> 2 IDs*/

SELECT page_id
FROM pages
WHERE page_id NOT IN (
  SELECT page_id 
  FROM page_likes
  WHERE page_id IS NOT NULL)

/*5--Assume you're given a table containing information on Facebook user actions. Write a query to obtain number of monthly active users (MAUs) in July 2022, including the month in numerical format "1, 2, 3".*/
SELECT 
  EXTRACT (month FROM curr.event_date) as month,
  COUNT(DISTINCT curr.user_id) as mau
FROM user_actions as curr
WHERE 
  EXTRACT (YEAR FROM curr.event_date) = 2022
  AND EXTRACT (MONTH FROM curr.event_date) = 7
  AND EXISTS (
    SELECT last.user_id
    FROM user_actions as last
    WHERE
      last.user_id = curr.user_id
      AND EXTRACT (YEAR FROM last.event_date) = 2022
      AND EXTRACT (MONTH FROM last.event_date) = EXTRACT (MONTH FROM curr.event_date)- 1)
GROUP BY EXTRACT (month FROM curr.event_date)

/*6--Write an SQL query to find for each month and country, the number of transactions and their total amount, the number of approved transactions and their total amount.
Return the result table in any order.*/
SELECT
    LEFT(trans_date,7) AS month,
    country,
    COUNT(id) AS tnx_count,
    SUM(CASE WHEN state = 'approved' THEN 1
        ELSE 0
        END) AS approved_tnx,
    SUM(amount) AS total_amount,
    SUM(CASE WHEN state = 'approved' THEN amount
        ELSE 0
        END) AS approved_amount
FROM Transactions
GROUP BY month, country

/*7--Write a solution to select the product id, year, quantity, and price for the first year of every product sold.
Return the resulting table in any order.*/
OPT1:
WITH first_sale AS (
    SELECT
        product_id,
        MIN(year) as first_year
    FROM sales
    WHERE sale_id IS NOT NULL
    GROUP BY product_id)

SELECT
track.product_id, track.year, track.quantity, track.price
FROM Sales as track
INNER JOIN first_sale ON first_sale.first_year = track.year AND first_sale.product_id = track.product_id

OPT2:
SELECT
product_id, year, quantity, price
FROM Sales
WHERE (product_id, year) IN (
    SELECT
        product_id,
        MIN(year) AS year
    FROM Sales
    WHERE sale_id IS NOT NULL
    GROUP BY product_id
)
/*8--Write a solution to report the customer ids from the Customer table that bought all the products in the Product table.
Return the result table in any order.*/

SELECT
customer_id
FROM Customer
GROUP BY customer_id
HAVING COUNT(DISTINCT product_key) = (
    SELECT COUNT(distinct product_key)
    FROM Product)

/*9--Find the IDs of the employees whose salary is strictly less than $30000 and whose manager left the company. When a manager leaves the company, their information is deleted from the Employees table, but the reports still have their manager_id set to the manager that left.
Return the result table ordered by employee_id.*/

SELECT
employee_id
FROM Employees
WHERE
    salary <30000
    AND manager_id IS NOT NULL
    AND manager_id NOT IN (
        SELECT
        DISTINCT(employee_id)
        FROM Employees
    )
ORDER BY employee_id

/*10--Assume you're given a table containing job postings from various companies on the LinkedIn platform. Write a query to retrieve the count of companies that have posted duplicate job listings.
Definition: Duplicate job listings are defined as two job listings within the same company that share identical titles and descriptions.*/

<< EMBEDED LINK IN TUTORIAL VIDEO IS DUPLICATED WITH QUESTION 1 ABOVE>>

/*11--Write a solution to:
Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.*/


/*12--*/
