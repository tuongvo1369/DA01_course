/*1--Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer.
Note: CITY.CountryCode and COUNTRY.Code are matching key columns.*/
SELECT 
    COUNTRY.CONTINENT,
    FLOOR(AVG(CITY.POPULATION)) AS avg_pop
FROM COUNTRY
JOIN CITY
ON COUNTRY.CODE =CITY.COUNTRYCODE
GROUP BY COUNTRY.CONTINENT
/*2--New TikTok users sign up with their emails. They confirmed their signup by replying to the text confirmation to activate their accounts. Users may receive multiple text messages for account confirmation until they have confirmed their new account.
A senior analyst is interested to know the activation rate of specified users in the emails table. Write a query to find the activation rate. Round the percentage to 2 decimal places.
Definitions:
emails table contain the information of user signup details.
texts table contains the users' activation information.
Assumptions:
The analyst is interested in the activation rate of specific users in the emails table, which may not include all users that could potentially be found in the texts table.
For example, user 123 in the emails table may not be in the texts table and vice versa.*/
SELECT
CONCAT(100*ROUND(COUNT(texts.email_id)
/ COUNT(DISTINCT emails.email_id),2),'%') AS activation_rate
FROM emails
LEFT JOIN texts
ON emails.email_id=texts.email_id
AND texts.signup_action = 'Confirmed'
/*3--Assume you're given tables with information on Snapchat users, including their ages and time spent sending and opening snaps.
Write a query to obtain a breakdown of the time spent sending vs. opening snaps as a percentage of total time spent on these activities grouped by age group. Round the percentage to 2 decimal places in the output.
Notes:
Calculate the following percentages:
time spent sending / (Time spent sending + Time spent opening)
Time spent opening / (Time spent sending + Time spent opening)
To avoid integer division in percentages, multiply by 100.0 and not 100.*/
SELECT
  b.age_bucket,
  CONCAT(ROUND(100.0*SUM(a.time_spent) FILTER (WHERE a.activity_type ='send')/ SUM(a.time_spent)),'%') AS pct_timespent_sending,
  CONCAT(ROUND(100.0*SUM(a.time_spent) FILTER (WHERE a.activity_type ='open') / SUM(a.time_spent)),'%') AS pct_timespent_opening
FROM activities AS a
JOIN age_breakdown AS b
  ON a.user_id =b.user_id
WHERE a.activity_type IN ('send','open')
GROUP BY b.age_bucket
/*4--A Microsoft Azure Supercloud customer is defined as a company that purchases at least one product from each product category.
Write a query that effectively identifies the company ID of such Supercloud customers.*/
SELECT 
  a.customer_id,
  COUNT(DISTINCT b.product_category) AS cate_count
FROM customer_contracts AS a
LEFT JOIN products AS b 
  ON a.product_id=b.product_id
GROUP BY a.customer_id
HAVING COUNT(DISTINCT b.product_category)=3
/*5--For this problem, we will consider a manager an employee who has at least 1 other employee reporting to them.
Write a solution to report the ids and the names of all managers, the number of employees who report directly to them, and the average age of the reports rounded to the nearest integer.
Return the result table ordered by employee_id*/
SELECT 
    emp1.employee_id, emp1.name,
    COUNT(DISTINCT emp2.employee_id) AS employee_count,
    ROUND(AVG(emp2.age)) AS avg_age
FROM employees as emp1
JOIN employees as emp2
    ON emp2.reports_to = emp1. employee_id
GROUP BY emp1.employee_id
/*6--Write a solution to get the names of products that have at least 100 units ordered in February 2020 and their amount.
Return the result table in any order.*/
SELECT
a.product_name,
SUM(b.unit) AS unit
FROM Products AS a
JOIN Orders AS b ON a.product_id = b.product_id
WHERE (EXTRACT(month FROM b.order_date) = 2
AND EXTRACT(year FROM b.order_date) = 2020)
GROUP BY a.product_name
HAVING SUM(b.unit) >=100
/*7--Assume you're given two tables containing data about Facebook Pages and their respective likes (as in "Like a Facebook Page").
Write a query to return the IDs of the Facebook pages that have zero likes. The output should be sorted in ascending order based on the page IDs.*/
SELECT
a.page_id,
COUNT(b.user_id) AS likes_count
FROM pages AS a 
LEFT JOIN page_likes AS b
ON a.page_id = b.page_id
GROUP BY a.page_id
HAVING COUNT(b.user_id) = 0
